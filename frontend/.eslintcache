[{"/Users/itairom/Desktop/petMe/frontend/src/index.js":"1","/Users/itairom/Desktop/petMe/frontend/src/serviceWorkerRegistration.js":"2","/Users/itairom/Desktop/petMe/frontend/src/reportWebVitals.js":"3","/Users/itairom/Desktop/petMe/frontend/src/store/store.js":"4","/Users/itairom/Desktop/petMe/frontend/src/App.jsx":"5","/Users/itairom/Desktop/petMe/frontend/src/pages/PetDetails.jsx":"6","/Users/itairom/Desktop/petMe/frontend/src/pages/PetApp.jsx":"7","/Users/itairom/Desktop/petMe/frontend/src/pages/LoginSignup.jsx":"8","/Users/itairom/Desktop/petMe/frontend/src/cmps/Header.jsx":"9","/Users/itairom/Desktop/petMe/frontend/src/cmps/SocketsNotification.jsx":"10","/Users/itairom/Desktop/petMe/frontend/src/cmps/Footer.jsx":"11","/Users/itairom/Desktop/petMe/frontend/src/pages/Explore.jsx":"12","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/index.js":"13","/Users/itairom/Desktop/petMe/frontend/src/pages/Profile.jsx":"14","/Users/itairom/Desktop/petMe/frontend/src/services/petService.js":"15","/Users/itairom/Desktop/petMe/frontend/src/services/utilService.js":"16","/Users/itairom/Desktop/petMe/frontend/src/services/socketService.js":"17","/Users/itairom/Desktop/petMe/frontend/src/store/actions/userActions.js":"18","/Users/itairom/Desktop/petMe/frontend/src/store/actions/petActions.js":"19","/Users/itairom/Desktop/petMe/frontend/src/services/userService.js":"20","/Users/itairom/Desktop/petMe/frontend/src/cmps/LongTxt.jsx":"21","/Users/itairom/Desktop/petMe/frontend/src/cmps/CommentsCmp.jsx":"22","/Users/itairom/Desktop/petMe/frontend/src/cmps/HeartLike.jsx":"23","/Users/itairom/Desktop/petMe/frontend/src/cmps/GoogleMap.jsx":"24","/Users/itairom/Desktop/petMe/frontend/src/cmps/FilterDynamic.jsx":"25","/Users/itairom/Desktop/petMe/frontend/src/cmps/HomepagePreview.jsx":"26","/Users/itairom/Desktop/petMe/frontend/src/cmps/PetFilter.jsx":"27","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/userReducer.js":"28","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/systemReducer.js":"29","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/petReducer.js":"30","/Users/itairom/Desktop/petMe/frontend/src/cmps/PetPreview.jsx":"31","/Users/itairom/Desktop/petMe/frontend/src/services/httpService.js":"32","/Users/itairom/Desktop/petMe/frontend/src/services/asyncStorageService.js":"33","/Users/itairom/Desktop/petMe/frontend/src/cmps/FilterSelect.jsx":"34","/Users/itairom/Desktop/petMe/frontend/src/cmps/PetList.jsx":"35"},{"size":911,"mtime":1622110866248,"results":"36","hashOfConfig":"37"},{"size":5064,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":364,"mtime":499162500000,"results":"39","hashOfConfig":"37"},{"size":439,"mtime":1622195954984,"results":"40","hashOfConfig":"37"},{"size":1066,"mtime":1623226340151,"results":"41","hashOfConfig":"37"},{"size":11683,"mtime":1623224367391,"results":"42","hashOfConfig":"37"},{"size":7140,"mtime":1623179708101,"results":"43","hashOfConfig":"37"},{"size":4303,"mtime":1623224300651,"results":"44","hashOfConfig":"37"},{"size":5952,"mtime":1623179708099,"results":"45","hashOfConfig":"37"},{"size":2490,"mtime":1623226454330,"results":"46","hashOfConfig":"37"},{"size":780,"mtime":1622787510354,"results":"47","hashOfConfig":"37"},{"size":3187,"mtime":1623337388695,"results":"48","hashOfConfig":"37"},{"size":319,"mtime":1622128435877,"results":"49","hashOfConfig":"37"},{"size":12308,"mtime":1623336963443,"results":"50","hashOfConfig":"37"},{"size":2139,"mtime":1623058174257,"results":"51","hashOfConfig":"37"},{"size":2198,"mtime":1622490041459,"results":"52","hashOfConfig":"37"},{"size":1553,"mtime":1623178729328,"results":"53","hashOfConfig":"37"},{"size":4242,"mtime":1623226340156,"results":"54","hashOfConfig":"37"},{"size":2121,"mtime":1623160688640,"results":"55","hashOfConfig":"37"},{"size":3940,"mtime":1623337439885,"results":"56","hashOfConfig":"37"},{"size":870,"mtime":1623046147319,"results":"57","hashOfConfig":"37"},{"size":4672,"mtime":1623178729324,"results":"58","hashOfConfig":"37"},{"size":2550,"mtime":1623058174251,"results":"59","hashOfConfig":"37"},{"size":1443,"mtime":1622635823152,"results":"60","hashOfConfig":"37"},{"size":1374,"mtime":1623046147318,"results":"61","hashOfConfig":"37"},{"size":2549,"mtime":1623058174252,"results":"62","hashOfConfig":"37"},{"size":4473,"mtime":1623179708100,"results":"63","hashOfConfig":"37"},{"size":1541,"mtime":1623178729330,"results":"64","hashOfConfig":"37"},{"size":735,"mtime":1622892945357,"results":"65","hashOfConfig":"37"},{"size":2087,"mtime":1622971761058,"results":"66","hashOfConfig":"37"},{"size":1814,"mtime":1623167340695,"results":"67","hashOfConfig":"37"},{"size":1134,"mtime":1623161631136,"results":"68","hashOfConfig":"37"},{"size":3495,"mtime":1623178729327,"results":"69","hashOfConfig":"37"},{"size":722,"mtime":1623178729325,"results":"70","hashOfConfig":"37"},{"size":355,"mtime":1622965134900,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"z6a83v",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/itairom/Desktop/petMe/frontend/src/index.js",[],"/Users/itairom/Desktop/petMe/frontend/src/serviceWorkerRegistration.js",[],"/Users/itairom/Desktop/petMe/frontend/src/reportWebVitals.js",[],"/Users/itairom/Desktop/petMe/frontend/src/store/store.js",[],"/Users/itairom/Desktop/petMe/frontend/src/App.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/pages/PetDetails.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/pages/PetApp.jsx",["150"],"import { connect } from 'react-redux'\nimport React from 'react'\nimport { loadPets, addPet } from '../store/actions/petActions'\nimport { onHome, showSearch, hideSearch } from '../store/actions/userActions'\nimport { Link } from 'react-router-dom'\nimport { FilterDynamic } from '../cmps/FilterDynamic'\nimport { HomepagePreview } from '../cmps/HomepagePreview'\nimport rightArrow from '../assets/img/svg/arrow-right.png'\nimport SearchOutlinedIcon from '@material-ui/icons/SearchOutlined';\nimport { ReactComponent as Loader } from '../assets/img/loaders/loader_3.svg' \nimport { ReactComponent as Paw } from '../assets/img/svg/paw.svg'\nimport ContactMailOutlinedIcon from '@material-ui/icons/ContactMailOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\n\nclass _PetApp extends React.Component {\n\n    async componentDidMount() {\n        window.scroll(0, 0)\n        this.props.hideSearch()\n        this.props.onHome()\n        await this.props.loadPets()\n    }\n\n    render() {\n        const { pets } = this.props\n        if (pets.length === 0) return <Loader />\n        return (\n            <section className=\"main-container\">\n                <section className=\"hero full\">\n                    <div className=\"hero-content\">\n                        <FilterDynamic />\n\n                        <h1>Find your</h1>\n                        <h1> best friend</h1>\n                    </div>\n                </section>\n                <div className=\"type-cards\">\n                    <h2 className=\"type-cards-title\">Our sweet pet types</h2>\n                    <div className=\"type-img\">\n                        <div>\n                            <Link to={`/explore/?gender=&age=&type=dog&location=&size=`} >\n                                <img src=\"https://res.cloudinary.com/dstqymucm/image/upload/v1622205405/dogs/dog3/frnach-dog3_npdovb.jpg\" alt=\"card\" />\n                                <h4>Dogs</h4>\n                            </Link>\n                        </div>\n                        <div>\n                            <Link to={`/explore/?gender=&age=&type=cat&location=&size=`} >\n                                <img src=\"https://res.cloudinary.com/dstqymucm/image/upload/v1622203804/petMe/cats/cat_nnrk1h.jpg\" alt=\"card\" />\n                                <h4>Cats</h4>\n                            </Link>\n                        </div>\n                        <div>\n                            <Link to={`/explore/?gender=&age=&type=rabbit&location=&size=`} >\n                                <img src=\"https://res.cloudinary.com/dstqymucm/image/upload/v1622206572/petMe/rabbit/rrabit3/1_2_chadja.jpg\" alt=\"card\" />\n                                <h4>Rabbits</h4>\n                            </Link>\n                        </div>\n                        <div>\n                            <Link to={`/explore/?gender=&age=&type=parrot&location=&size=`} >\n                                <img src=\"https://res.cloudinary.com/dstqymucm/image/upload/v1622213930/petMe/parrot/1_3_s1zdqk.jpg\" alt=\"card\" />\n                                <h4>Parrots</h4>\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n                <section className=\"homepage-section-info\">\n                    <div className=\"content\">\n                        <div>\n                            <div className=\"info-title-icon\">\n                                <h2>Filter down to your perfect fit</h2>\n                                {/* <img className=\"info-icons\" src={magnifyingGlass} alt=\"glass\" /> */}\n                                <SearchOutlinedIcon className=\"info-icons\" />\n                            </div>\n                            <p> Personalize your search with filters like gender,\n                            type, size or a pool to get exactly what you want.\n                            {/* <img className=\"arrow-icons\" src={rightArrow} alt=\"\" /> */}\n                            </p>\n                        </div>\n                        <div>\n                            <div className=\"info-title-icon\">\n                                <h2>Dig into the details</h2>\n                                <InfoOutlinedIcon className=\"info-icons\"/>\n                            </div>\n                            <p> Check out the photos and view pet information.\n                                Next, read user reviews and comments about the pet and its owner.\n                                {/* <img className=\"arrow-icons\" src={rightArrow} alt=\"\" /> */}\n                                </p>\n                        </div>\n                        <div>\n                            <div className=\"info-title-icon\">\n                                <h2>Contact pet owners</h2>\n                                {/* <img className=\"info-icons\" src={contact} alt=\"glass\" /> */}\n                                <ContactMailOutlinedIcon className=\"info-icons\"/>\n                            </div>\n                            <p>  Once you have decided which pet you would like to adopt, contact the pet owners and keep your fingers crossed.\n                            {/* <img className=\"arrow-icons\" src={rightArrow} alt=\"\" /> */}\n                            </p>\n                        </div>\n                        <div>\n                            <div className=\"info-title-icon\">\n                                <h2>Adopt a friend!</h2>\n                                {/* <img className=\"info-icons\" src={paw} alt=\"glass\" /> */}\n                                <Paw className=\"info-icons\" />\n                            </div>\n                            <p> In a quick and easy process you can adopt a pet that will become your new companion for life. Join us for a fun journey! \n                            </p>\n                        </div>\n                    </div>\n                </section>\n                <HomepagePreview pets={this.props.pets} />\n                <section className=\"homepage-about main-container full\">\n                    <div className=\"blur full\">\n                        <div className=\"about-content flex column\">\n                            <h2>Our vision</h2>\n                            <p>PetMe is dedicated to saving the lives of animals in need. We improve animal welfare in communities through adoption, education, and providing resources for people and pets.</p>\n                            <p>We strive for a world where every companion animal has a safe and loving home and their family has the knowledge and resources needed to give them the life they deserve.</p>\n                            <img className=\"welcome-logo\" src=\"https://petcolove.org/wp-content/uploads/2018/08/welcome-to-the-family-web.png\" alt=\"\" />\n                        </div>\n                    </div>\n                </section>\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        pets: state.petModule.pets\n    }\n}\n\nconst mapDispatchToProps = {\n    loadPets,\n    addPet,\n    onHome,\n    showSearch,\n    hideSearch\n}\n\nexport const PetApp = connect(mapStateToProps, mapDispatchToProps)(_PetApp)","/Users/itairom/Desktop/petMe/frontend/src/pages/LoginSignup.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/Header.jsx",["151","152"],"import userIcon from '../assets/img/header/user.svg' // relative path to image \r\nimport menuIcon from '../assets/img/header/menu.svg' // relative path to image \r\n// import logo from '../assets/img/logo.png' // relative path to image \r\nimport React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { logout } from '../store/actions/userActions'\r\nimport { socketService } from '../services/socketService'\r\nimport magnifyingGlass from '../assets/img/svg/magnifying-glass.svg' // relative path to image \r\nimport { loadPets } from '../store/actions/petActions'\r\nimport { approveAdoptToOwner } from '../store/actions/userActions'\r\nimport { PetFilter } from './PetFilter'\r\nimport { ReactComponent as Logo } from '../assets/img/svg/logo1.svg'\r\nimport { SocketsNotification } from '../cmps/SocketsNotification'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\n\r\n\r\n\r\nclass _Header extends Component {\r\n\r\n    state = {\r\n        isProfileShown: false,\r\n        isRequested: false,\r\n        navBackground: false,\r\n        isFilterShown: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('cdm');\r\n        window.addEventListener('click', this.handleClick)\r\n        window.addEventListener('scroll', this.handleScroll)\r\n        socketService.on('sending-new-owner-to-save', () => {\r\n            this.props.approveAdoptToOwner()\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('click', this.handleClick)\r\n        window.removeEventListener('scroll', this.handleScroll)\r\n    }\r\n\r\n    handleScroll = () => {\r\n        this.setState({ isFilterShown: false })\r\n        if (window.pageYOffset > 50) {\r\n            this.setState({ navBackground: true });\r\n        } else {\r\n            this.setState({ navBackground: false });\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        if (this.state.isProfileShown && window.event.clientY > 80) {\r\n            this.setState({ isProfileShown: false })\r\n        }\r\n    }\r\n\r\n    onLogout = () => {\r\n        this.props.logout(this.props.loggedInUser._id)\r\n    }\r\n\r\n    toggleDropdown = () => {\r\n        this.setState({ isProfileShown: !this.state.isProfileShown })\r\n    }\r\n\r\n    onToggleFilter = () => {\r\n        this.setState({ isFilterShown: !this.state.isFilterShown }\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const { loggedInUser, inExplore, isShowSearch } = this.props\r\n        const { isProfileShown, navBackground, isFilterShown } = this.state\r\n\r\n        return (\r\n            <header className={`main-header ${navBackground && 'nav-white'}  ${!navBackground && 'nav-transparent'} \r\n              main-container     ${isShowSearch && isFilterShown && 'resize-nav'}`}   >\r\n                < nav className=\"header-container\" >\r\n                    <NavLink to=\"/\">\r\n                        <div className=\"logo-container flex\">\r\n                            <Logo className=\"logo\" />\r\n                            <h1 className={`logo-title ${navBackground && 'black'} ${inExplore && 'black'} `}>PetMe</h1>\r\n                        </div>\r\n                    </NavLink>\r\n\r\n                    <section className=\"filter-section\">\r\n                        {isShowSearch && !isFilterShown && <div className=\"explore-search\">\r\n                            <span onClick={() => this.onToggleFilter()} > Start your search</span>\r\n                            {/* <span onClick={() => this.onToggleFilter()} > Start your search</span> */}\r\n                            <SearchIcon className=\"search-btn-explore\" />\r\n                        </div>}\r\n                        {isShowSearch && isFilterShown &&\r\n                            < PetFilter />\r\n                        }\r\n                    </section>\r\n                    <div>\r\n                        {/* <span>{ (this.state.isRequested) ? 'requests' : '' }</span> */}\r\n                        <SocketsNotification />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"right-nav\">\r\n                        <NavLink onClick={() => this.props.loadPets()} className={`explore-btn ${navBackground && 'black'} ${inExplore && 'black'} `}\r\n                            to='/explore/?gender=&age=&type=&location=&size='>\r\n                            Explore</NavLink>\r\n                        <div onClick={() => this.toggleDropdown()} className=\"login-profile\">\r\n                            {isProfileShown && <div className=\"user-dropdown\">\r\n                                <div className=\"dropdown-list\">\r\n                                    {(loggedInUser) && <Link to='/profile' >\r\n                                        <span>Profile</span>\r\n                                    </Link>}\r\n\r\n                                    {(loggedInUser) &&\r\n                                        <a href=\"\" onClick={() => this.onLogout()}>Logout</a>\r\n                                    }\r\n                                    {(!loggedInUser) && <Link to='/login' >\r\n                                        <span>Login</span>\r\n                                    </Link>}\r\n                                </div>\r\n                            </div>}\r\n\r\n                            <img src={menuIcon} alt=\"icon\" />\r\n                            {(!loggedInUser) && <img src={userIcon} alt=\"icon\" />}\r\n                            {(loggedInUser) && <img className=\"profile-icon\" src={loggedInUser.imgUrl} alt=\"icon\" />}\r\n                        </div>\r\n                    </div>\r\n                </nav >\r\n            </header >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loggedInUser: state.userModule.loggedInUser,\r\n        inExplore: state.systemModule.onExplore,\r\n        isShowSearch: state.systemModule.isShowSearch\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    logout, loadPets, approveAdoptToOwner\r\n}\r\n\r\n\r\nexport const Header = connect(mapStateToProps, mapDispatchToProps)(_Header)","/Users/itairom/Desktop/petMe/frontend/src/cmps/SocketsNotification.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/Footer.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/pages/Explore.jsx",["153"],"import { connect } from 'react-redux'\nimport React from 'react'\nimport { loadPets } from '../store/actions/petActions'\nimport { onExplore, showSearch } from '../store/actions/userActions'\nimport { PetList } from '../cmps/PetList'\nimport userIcon from '../assets/img/loaders/loader_2.svg' // relative path to image\n\nclass _Explore extends React.Component {\n    state = {\n        isFilterShown: false,\n        filterBy: null,\n        sortBy: '',\n        isLoading: false\n    }\n    async componentDidMount() {\n        window.scroll(0, 0)\n        this.props.onExplore()\n        this.props.showSearch()\n        await this.onSetFilter()\n        await this.props.loadPets(this.state.filterBy)\n        this.setState({ isLoading: true })\n    }\n\n    async componentDidUpdate() {\n        const query = new URLSearchParams(this.state.filterBy).toString()\n    }\n\n    onSetSort = () => {\n        const { filterBy, sortBy } = this.state\n        let filter = {\n            ...filterBy,\n            sort: sortBy\n        }\n        this.props.loadPets(filter)\n    }\n    handleChange = (event) => {\n        this.setState({ sortBy: event.target.value },\n            () => {\n                this.onSetSort()\n            })\n    }\n\n    onSetFilter = () => {\n        const search = new URLSearchParams(this.props.location.search)\n        let filterBy = {\n            gender: search.get('gender'),\n            type: search.get('type'),\n            age: search.get('age'),\n            size: search.get('size'),\n            location: search.get('location'),\n        }\n        this.setState({ filterBy })\n    }\n\n    onToggleFilter = () => {\n        this.setState({ isFilterShown: !this.state.isFilterShown }\n        )\n    }\n\n    render() {\n        const { pets } = this.props\n        const { filterBy, isLoading } = this.state\n        if (!pets.length) return <img src={userIcon} alt=\"loading\" />\n        if (!filterBy) return <img src={userIcon} alt=\"loading\" />\n        if (!isLoading) return <img src={userIcon} alt=\"loading\" />\n        return (\n            <section className=\"main-container explore-container\">\n                <div className=\"filter-description\">\n                    { !filterBy.type && <h1 >Our pets</h1> }\n\n                    { filterBy.type && <h1>Our <span> { filterBy.gender } { filterBy.size } { filterBy.type }s</span>  </h1> }\n\n                    <div className=\"sort-form\">\n                        <label>Sort By</label>\n                        <select className=\"select-sort\" value={this.state.sortBy} onChange={this.handleChange}>\n                            <option value=\"createdAt\">Date</option>\n                            <option value=\"name\">Name</option>\n                            <option value=\"likes\">Likes</option>\n                        </select>\n\n                    </div>\n                </div>\n                < PetList pets={pets} />\n            </section>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        pets: state.petModule.pets,\n        inExplore: state.systemModule.onExplore\n    }\n}\n\nconst mapDispatchToProps = {\n    loadPets, onExplore, showSearch\n}\n\nexport const Explore = connect(mapStateToProps, mapDispatchToProps)(_Explore)\n","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/index.js",[],"/Users/itairom/Desktop/petMe/frontend/src/pages/Profile.jsx",["154"],"import AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined'\nimport React, { Component } from 'react'\nimport { connect } from 'react-redux'\n// import StarRateIcon from '@material-ui/icons/StarRate'\n// import { store } from 'react-notifications-component'\nimport Loader from '../assets/img/loaders/loader_3.svg' // relative path to image \nimport Pin from '../assets/img/svg/pin.svg' // relative path to image \nimport { onExplore } from '../store/actions/userActions'\nimport Rating from '@material-ui/lab/Rating';\nimport { utilService } from '../services/utilService'\nimport { loadUsers, login, logout, removeUser, signup, approveAdopt, getUser } from '../store/actions/userActions'\nimport { loadPets } from '../store/actions/petActions'\nimport { socketService } from '../services/socketService'\nimport { userService } from '../services/userService'\n\n\nclass _Profile extends Component {\n    state = {\n        userPets: [],\n        userRequests: [],\n        isGotRequests: false,\n        isRemoveReq: false,\n        reqBtnTxt: '',\n        adoptionRequestsInfo: [],\n        loggedInUser: null,\n        newLiveRequest: null,\n        newLiveApprove: null,\n        updatedPets: null\n    }\n\n    componentDidMount() {\n        window.scrollTo(0, 0)\n        this.onLoadPets()\n        this.socketListeners()\n        this.loadLoggedInUser()\n        this.props.onExplore()\n        socketService.on('adopt-request-owner-data', (data) => {\n            console.log('im on profile')\n            this.setState({ IncomingLiveData: data })\n        })\n    }\n\n    loadLoggedInUser = () => {\n        userService.updateLoggedInUser(this.props.loggedInUser._id);\n    }\n\n    onLoadPets = () => {\n        this.props.loadPets()\n            .then(() => {\n                //find why pets dont load \n                const userPets = this.props.loggedInUser.pets.map(userPet => {\n                    return this.props.pets.filter(pet => userPet._id === pet._id)\n                }).flatMap(e => e)\n                this.setState({ userPets })\n            })\n    }\n\n    socketListeners = () => {\n        socketService.on('adopt-request-owner-data', (data) => {\n            console.log('recived data in profile')\n            this.setState({ newLiveRequest: data })\n\n        })\n        socketService.on('adopt-request-approved-data', (data) => {\n            this.setState({ newLiveApprove: data.pet })\n\n        })\n    }\n\n\n    onLoadRequests = () => {\n        const adoptionRequestsInfo = this.props.users.map(user => {\n            return user.pets.map(pet => {\n                return pet.adoptQue.map(request => {\n                    if (request.userId === this.props.loggedInUser._id) {\n                        return { user, pet: { ...pet, userId: user._id } }\n                    }\n                    return undefined\n                }).filter(e => e)\n            }).flatMap(e => e)\n        });\n        this.setState({ adoptionRequestsInfo })\n    }\n\n    removeReq = (ev) => {\n    }\n    toggleRemoveReq = () => {\n    }\n    reqBtnTxt = (txt) => {\n        this.setState({ reqBtnTxt: txt })\n    }\n\n    approveAdopt = (pet, req, loggedInUser, idx) => {\n        const msg = loggedInUser.fullname + ' just approved your request to adopt ' + pet.name\n        const data = { pet, req, loggedInUser, idx, msg }\n        this.props.approveAdopt(data)\n\n        // socketService.emit('aprove-adopt', data)\n    }\n\n\n\n    render() {\n        this.loadLoggedInUser()\n        const { loggedInUser } = this.props\n        const { userPets } = this.state\n        console.log(loggedInUser, userPets)\n        let newLiveRequest = null\n        let newLiveApprove = null\n        if (this.state.newLiveRequest) {\n            const { newRequest } = this.state.newLiveRequest\n            newLiveRequest = newRequest\n        }\n        \n        if (!loggedInUser) return <img src={ Loader } alt=\"loadnig\" />\n        if (loggedInUser.pets.legnth > 0 && userPets.length < 1) return <img src={ Loader } alt=\"loadnig\" />\n        return (\n\n            <section className=\"main-profile main-container\">\n                <section className=\"user-card\">\n                    <div className=\"profile-img\">\n                        <img src={loggedInUser.imgUrl} alt={<AccountCircleOutlinedIcon />} />\n                    </div>\n                    <section className=\"user-info\">\n                        <h1>{loggedInUser.fullname} </h1>\n                        <h4>{loggedInUser.username} </h4>\n                        <h4 className=\"italic\">\"{loggedInUser.title}\"</h4>\n                        <div className=\"location-info\">\n                            <img src={Pin} alt=\"location info\" />\n                            <div>{loggedInUser.loc.address}</div>\n                        </div>\n                        <div className=\"user-rate\">\n                            <Rating name=\"disabled\" value={loggedInUser.rating ? loggedInUser.rating : loggedInUser.reviews[0]?.rate} disabled />\n                        </div>\n                    </section>\n                </section>\n\n                <section className=\"profile-pets-container flex\" >\n\n                    <div className=\"user-pets\">\n                        <h1>My pets</h1>\n                        { userPets && userPets.map((pet, idx) => {\n                            return (\n                                <div className=\"adopt-card flex\" key={utilService.makeId(6)}>\n                                    <div className=\"adopt-card-info\">\n                                        <div className=\"pet-header flex\">\n                                            <div className=\"pet-header-txt flex column\">\n                                                <h3>{ pet.name }</h3>\n                                                <span>Added: { utilService.timeSince(pet.addedAt, 'ago') }</span>\n                                                <h4>Request Queue: </h4>\n                                            </div>\n                                            <div className=\"pet-img-box flex align-center\">\n                                                <img src={pet.imgUrls[0]} alt=\"pet\" />\n                                            </div>\n                                        </div>\n                                        <section className=\"adopt-table\">\n                                            <table className=\"pet-table-card\">\n                                                <tbody className=\"table-body\" key={ utilService.makeId(6) }>\n                                                    { loggedInUser.pets[idx].adoptQue.map(req => {\n                                                        return (\n                                                            <div className=\"adopt-que-card flex space-between\" key={ utilService.makeId(6) }>\n                                                                <tr className=\"flex column\">\n                                                                    <td className=\"req-name\">{ req.fullname }</td>\n                                                                    <td className=\"req-msg\">{ req.message }</td>\n                                                                    <td className=\"req-time\">{ utilService.timeSince(req.date, 'ago') }</td>\n                                                                </tr>\n                                                                <button onClick={ () => this.approveAdopt(pet, req, loggedInUser, idx) } className=\"aprove-btn\">Approve Adoption</button>\n                                                            </div>\n                                                        )\n                                                    }) \n                                                    }\n                                                    { newLiveRequest &&\n                                                        <tr key={ utilService.makeId(6) }>\n                                                            <td>{ newLiveRequest.fullname }</td>\n                                                            <td>{ newLiveRequest.message }</td>\n                                                            <td>{ utilService.timeSince(newLiveRequest.date, 'ago') }</td>\n                                                            <td><button onClick={ () => this.approveAdopt(pet, newLiveRequest, loggedInUser, idx) } className=\"aprove-btn\">Aprove</button></td>\n                                                        </tr>\n                                                    }\n                                                </tbody>\n                                            </table>\n                                        </section>\n                                    </div>\n                                </div>\n                            )\n                        }) }\n                    </div>\n                    <div className=\"user-requests hide\">\n                        <h1>My requests</h1>\n                        <div className=\"request-list flex column\">\n                            {userPets.map((pet, idx) => {\n                                return (\n                                    loggedInUser.pets[idx]\n                                        .adoptQue.map(req => {\n                                            return (\n                                                <div className=\"request-card flex column\" key={utilService.makeId(6)}>\n                                                    <div className=\"main-card-section\">\n                                                        <div className=\"request-info\">\n                                                            <div className=\"req-owner-name flex\">\n                                                                <h3>From:</h3>\n                                                                <span className=\"owner-name\">{req.fullname}</span>\n                                                            </div>\n                                                            <div className=\"req-pet-info flex\">\n                                                                <h3 className=\"about-pet\">Messege:</h3>\n                                                                <span className=\"pet-name\">{req.message}</span>\n                                                            </div>\n                                                            <div className=\"req-time\">{utilService.timeSince(req.date, 'ago')}</div>\n                                                        </div>\n                                                        <div className=\"request-statue\">\n                                                            <button onClick={() => this.toggleRemoveReq}\n                                                                onMouseOver={() => this.reqBtnTxt('Delete this Request')}\n                                                                onMouseOut={() => this.reqBtnTxt('Requested/Aprove')}\n                                                                className={this.state.isRemoveReqHover ? 'remove-request hovering' : 'remove-request'}>\n                                                                {this.state.reqBtnTxt ? this.state.reqBtnTxt : 'Requested/Aprove'}\n                                                            </button>\n                                                        </div>\n                                                    </div>\n                                                    <div className=\"card-extention\"></div>\n                                                </div>\n                                            )\n                                        })\n                                )\n                            })}\n                        </div>\n                    </div>\n                </section>\n\n            </section >\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.userModule.users,\n        loggedInUser: state.userModule.loggedInUser,\n        isLoading: state.systemModule.isLoading,\n        pets: state.petModule.pets,\n    }\n}\nconst mapDispatchToProps = {\n    login,\n    logout,\n    signup,\n    removeUser,\n    loadUsers,\n    loadPets,\n    onExplore,\n    approveAdopt,\n    getUser\n}\n\nexport const Profile = connect(mapStateToProps, mapDispatchToProps)(_Profile)\n","/Users/itairom/Desktop/petMe/frontend/src/services/petService.js",[],"/Users/itairom/Desktop/petMe/frontend/src/services/utilService.js",[],"/Users/itairom/Desktop/petMe/frontend/src/services/socketService.js",["155"],"import io from 'socket.io-client'\r\nimport { httpService } from './httpService'\r\n\r\nexport const SOCKET_EMIT_USER_WATCH = 'user-watch';\r\nexport const SOCKET_EVENT_USER_UPDATED = 'user-updated';\r\nexport const SOCKET_EVENT_REVIEW_ADDED = 'review-added';\r\nexport const SOCKET_EVENT_ADOPT_REQUEST = 'adopt-request';\r\n\r\n\r\nconst baseUrl = (process.env.NODE_ENV === 'production') ? '' : '//localhost:3030'\r\nexport const socketService = createSocketService()\r\n// export const socketService = createDummySocketService()\r\n\r\nwindow.socketService = socketService\r\n\r\nvar socketIsReady = false;\r\nsocketService.setup()\r\n\r\n\r\nfunction createSocketService() {\r\n  var socket = null;\r\n  const socketService = {\r\n    async setup() {\r\n      if (socket) return\r\n      await httpService.get('setup-session')\r\n      socket = io(baseUrl, { reconnection: false })\r\n      socketIsReady = true;\r\n    },\r\n    async on(eventName, cb) {\r\n      // console.log('im in socketservice front on')\r\n      if (!socket) await socketService.setup()\r\n      socket.on(eventName, cb)\r\n    },\r\n    async off(eventName, cb = null) {\r\n      if (!socket) await socketService.setup()\r\n      if (!cb) socket.removeAllListeners(eventName)\r\n      else socket.off(eventName, cb)\r\n    },\r\n    async emit(eventName, data) {\r\n      console.log('im in socketservice front emit')\r\n      if (!socket) await socketService.setup()\r\n      socket.emit(eventName, data)\r\n    },\r\n    terminate() {\r\n      socket = null\r\n      socketIsReady = false\r\n    }\r\n  }\r\n  // console.log(socketIsReady)\r\n  return socketService\r\n}\r\n","/Users/itairom/Desktop/petMe/frontend/src/store/actions/userActions.js",[],"/Users/itairom/Desktop/petMe/frontend/src/store/actions/petActions.js",[],"/Users/itairom/Desktop/petMe/frontend/src/services/userService.js",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/LongTxt.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/CommentsCmp.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/HeartLike.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/GoogleMap.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/FilterDynamic.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/HomepagePreview.jsx",["156","157"],"import { PetPreview } from '../cmps/PetPreview.jsx'\nimport { connect } from 'react-redux'\nimport React from 'react'\nimport { loadPets, addPet } from '../store/actions/petActions'\n\nclass _HomepagePreview extends React.Component {\n\n    state = {\n        likedPets: [],\n        mostWaitingPets: []\n    }\n\n    async componentDidMount() {\n        await this.props.loadPets()\n        this.setLikedPets()\n        this.setMostWaitingPets()\n    }\n\n    setLikedPets = () => {\n        let likedPets = [...this.props.pets]\n        likedPets.sort((a, b) => {\n            if (a.likes > b.likes) {\n                return -1\n            }\n            if (a.likes < b.likes) {\n                return 1\n            }\n        })\n        likedPets.splice(4)\n        this.setState({ likedPets })\n    }\n\n    setMostWaitingPets = () => {\n        let mostWaitingPets = [...this.props.pets]\n        mostWaitingPets.sort((a, b) => {\n            if (b.addedAt > a.addedAt) {\n                return -1\n            }\n            if (a.addedAt < b.addedAt) {\n                return 1\n            }\n        })\n        mostWaitingPets.splice(4)\n        this.setState({ mostWaitingPets })\n    }\n\n    render() {\n        const { likedPets, mostWaitingPets } = this.state\n        if (!likedPets.length) return <h1>loading</h1>\n        if (!mostWaitingPets.length) return <h1>loading</h1>\n\n        return (\n            <>\n                <section className=\"type-cards preview-homepage\">\n                    <h2 className=\"type-cards-title\">Waiting long time to adopt</h2>\n                    <div className=\"preview-cards\">\n                        { mostWaitingPets.map(previewPet => {\n                            return <PetPreview pet={ previewPet } key={ previewPet._id } />\n                        }) }\n                    </div>\n                </section>\n\n                <section className=\"type-cards preview-homepage\">\n                    <h2 className=\"type-cards-title\">Most Liked Pets</h2>\n                    <div className=\"preview-cards\">\n                        { likedPets.map(previewPet => {\n                            return <PetPreview pet={ previewPet } key={ previewPet._id } />\n                        }) }\n                    </div>\n                </section>\n            </>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        homePreviewPets: state.petModule.homePreviewPets\n    }\n}\n\n\nconst mapDispatchToProps = {\n    loadPets,\n    addPet,\n}\n\nexport const HomepagePreview = connect(mapStateToProps, mapDispatchToProps)(_HomepagePreview)","/Users/itairom/Desktop/petMe/frontend/src/cmps/PetFilter.jsx",["158"],"import magnifyingGlass from '../assets/img/svg/magnifying-glass.svg' // relative path to image \nimport { withRouter } from 'react-router-dom'\nimport React from 'react'\nimport { FilterSelect } from './FilterSelect'\nimport SearchIcon from '@material-ui/icons/Search';\n\n\n\nclass _PetFilter extends React.Component {\n\n    state = {\n        filterBy: {\n            gender: '',\n            type: '',\n            age: '',\n            size: '',\n            location: ''\n        },\n        toggleSelect: {\n            gender: false,\n            type: false,\n            age: false,\n            size: false,\n        },\n\n    }\n\n    handleChangeInput = ({ target }) => {\n        const { name, value } = target\n        const { filterBy } = this.state\n        this.setState({ filterBy: { ...filterBy, [name]: value } })\n    }\n\n    handleChange = (value, name) => {\n        const { filterBy } = this.state\n        this.setState({\n            filterBy: {\n                ...filterBy,\n                [name]: value\n            }\n        })\n    }\n\n    onSubmitFilter = () => {\n        const query = new URLSearchParams(this.state.filterBy)\n        if(this.props.loadPets){\n            this.props.loadPets()\n        }\n        this.props.history.push(`/explore/?${query.toString()}`)\n    }\n\n    onToggleSelect = (by) => {\n        const { toggleSelect } = this.state\n        this.setState({\n            toggleSelect: {\n                [by]: !toggleSelect[by]\n            }\n        })\n    }\n\n    setOptions = () => {\n        const options = {\n            size: ['small', 'medium', 'big'],\n            type: ['cat', 'dog', 'rabbit', 'parrot', 'hamster'],\n            gender: ['male', 'female'],\n            age: ['young', 'adult', 'senior']\n        }\n        return options\n    }\n\n\n    render() {\n        const options = this.setOptions()\n        // const sizeOptions = ['small', 'medium', 'big']\n        const { gender, age, type, location, size } = this.state.filterBy\n        const { toggleSelect } = this.state\n\n        return (\n            <section className='pet-filter'>\n                <div className=\"filter-select pet-select\">\n                    <label >Pet</label>\n                    <label onClick={() => this.onToggleSelect('type')} className=\"select-label\">\n                        <label >{type}{!type && 'any'}</label>\n                        {toggleSelect.type && <FilterSelect key={type} handleChange={this.handleChange} options={options.type} name=\"type\" />}\n                    </label>\n                </div>\n                <div className=\"filter-select gender-select\">\n                    <label >Gender</label>\n                    <label onClick={() => this.onToggleSelect('gender')} className=\"select-label\">\n                        <label >{gender}{!gender && 'any'}</label>\n                        {toggleSelect.gender && <FilterSelect key={gender} handleChange={this.handleChange} options={options.gender} name=\"gender\" />}\n                    </label>\n                </div>\n                <div className=\"filter-select age-select\">\n                    <label >Age</label>\n                    <label onClick={() => this.onToggleSelect('age')} className=\"select-label\">\n                        <label >{age}{!age && 'any'}</label>\n                        {toggleSelect.age && <FilterSelect key={age} handleChange={this.handleChange} options={options.age} name=\"age\" />}\n                    </label>\n\n                </div>\n                <div className=\"filter-select size-select\">\n                    <label >Size</label>\n                    <label onClick={() => this.onToggleSelect('size')} className=\"select-label\">\n                        <label >{size}{!size && 'any'}</label>\n                        {toggleSelect.size && <FilterSelect key={size} handleChange={this.handleChange} options={options.size} name=\"size\" />}\n                    </label>\n                </div>\n                <div className=\"filter-select location-select\">\n                    <label className=\"location-label\">Location</label>\n                    <input placeholder=\"Enter location\" className='location-select' value={location} onChange={this.handleChangeInput} name=\"location\"  ></input>\n                </div>\n                <button className=\"search-btn filter-select\" onClick={this.onSubmitFilter}>\n                    <SearchIcon className=\"filter-search\"/>\n                </button>\n            </section>\n        )\n    }\n}\n\nexport const PetFilter = withRouter(_PetFilter)","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/userReducer.js",[],"/Users/itairom/Desktop/petMe/frontend/src/store/reducers/systemReducer.js",["159"],"const initialState = {\r\n  isLoading: false,\r\n  onExplore: false,\r\n  isShowSearch:false\r\n};\r\n\r\nexport function systemReducer(state = initialState, action = {}) {\r\n  switch (action.type) {\r\n    case 'SHOW_SEARCH':\r\n      return { ...state, isShowSearch: true }\r\n    case 'NOT_SHOW_SEARCH':\r\n      return { ...state, isShowSearch: false }\r\n    case 'SHOW_SEARCH':\r\n      return { ...state, isShowSearch: !state.isShowSearch }\r\n    case 'ON_EXPLORE':\r\n      return { ...state, onExplore: true }\r\n    case 'ON_HOME':\r\n      return { ...state, onExplore: false }\r\n    case 'LOADING_START':\r\n      return { ...state, isLoading: true }\r\n    case 'LOADING_DONE':\r\n      return { ...state, isLoading: false }\r\n    default: return state\r\n  }\r\n}\r\n","/Users/itairom/Desktop/petMe/frontend/src/store/reducers/petReducer.js",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/PetPreview.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/services/httpService.js",[],"/Users/itairom/Desktop/petMe/frontend/src/services/asyncStorageService.js",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/FilterSelect.jsx",[],"/Users/itairom/Desktop/petMe/frontend/src/cmps/PetList.jsx",[],{"ruleId":"160","severity":1,"message":"161","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":18},{"ruleId":"160","severity":1,"message":"164","line":9,"column":8,"nodeType":"162","messageId":"163","endLine":9,"endColumn":23},{"ruleId":"165","severity":1,"message":"166","line":115,"column":41,"nodeType":"167","endLine":115,"endColumn":84},{"ruleId":"160","severity":1,"message":"168","line":25,"column":15,"nodeType":"162","messageId":"163","endLine":25,"endColumn":20},{"ruleId":"160","severity":1,"message":"169","line":109,"column":13,"nodeType":"162","messageId":"163","endLine":109,"endColumn":27},{"ruleId":"160","severity":1,"message":"170","line":16,"column":5,"nodeType":"162","messageId":"163","endLine":16,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":21,"column":31,"nodeType":"173","messageId":"174","endLine":21,"endColumn":33},{"ruleId":"171","severity":1,"message":"172","line":35,"column":37,"nodeType":"173","messageId":"174","endLine":35,"endColumn":39},{"ruleId":"160","severity":1,"message":"164","line":1,"column":8,"nodeType":"162","messageId":"163","endLine":1,"endColumn":23},{"ruleId":"175","severity":1,"message":"176","line":13,"column":5,"nodeType":"177","messageId":"178","endLine":14,"endColumn":61},"no-unused-vars","'rightArrow' is defined but never used.","Identifier","unusedVar","'magnifyingGlass' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'query' is assigned a value but never used.","'newLiveApprove' is assigned a value but never used.","'socketIsReady' is assigned a value but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected"]